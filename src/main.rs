extern crate chip;
extern crate term_oss;

use chip::Chip;
use term_oss::Peripheral;
//use dummy::Peripheral;

fn main() {
    let mut chip = Chip::default();
    let mut pe = Peripheral::default();

    // AUDIO TEST
    /*
    // sync
    chip.load(0x800, &[
              0xFE, 0x07,       // 800: ldd RE
              0x3E, 0x00,       //      seq RE, 00
              0x18, 0x00,       //      jmp 800
              0x00, 0xEE,       //      ret
    ]);
    // main
    chip.load(0x200, &[
              0x60, 0x05,       // 200: mov R0, 05
              0xF0, 0x18,       //      sts R0
              0xF0, 0x15,       //      std R0
              0x28, 0x00,       //      cal 800    // sync
              0xF0, 0x15,       //      std R0
              0x28, 0x00,       //      cal 800    // sync
              0x12, 0x00,       //      jmp 200
    ]);
    */

    // F8Z
    chip.load(0x200, &[
              0x14, 0x14, 0x07, 0x19, 0x61, 0x81, 0x87, 0x99, 0x81, 0x81,
              0x87, 0x9E, 0x98, 0x90, 0x90, 0xF0, 0xE0, 0x0E, 0x33, 0x41,
              0x89, 0x99, 0x93, 0x81, 0xC1, 0x89, 0x99, 0x91, 0x83, 0xCE,
              0x78, 0x60, 0x07, 0x19, 0x61, 0x81, 0x91, 0xE1, 0x43, 0x86,
              0x89, 0x81, 0x81, 0x87, 0x9E, 0xF8, 0x60, 0x07, 0x0F, 0x7F,
              0xFF, 0xC0, 0xE0, 0xFE, 0xFF, 0x30, 0x7E, 0xFF, 0x06, 0x1B,
              0x65, 0x8F, 0xD5, 0xBD, 0xFB, 0x7E, 0x83, 0xBB, 0xBB, 0xBB,
              0x83, 0x7F, 0xFD, 0x00, 0x78, 0xD6, 0xFE, 0xFD, 0xBF, 0xFF,
              0xFE, 0xFF, 0x83, 0xAB, 0xAB, 0xBB, 0x82, 0xFF, 0xBF, 0x00,
              0x60, 0xB8, 0xFE, 0xFB, 0x7B, 0x7F, 0xFF, 0xDF, 0x83, 0xBA,
              0xA3, 0xBB, 0x83, 0x7F, 0xFD, 0x00, 0x16, 0xD9, 0xA6, 0xBB,
              0xFB, 0xFF, 0xDF, 0xFE, 0x82, 0xBB, 0xAB, 0xAB, 0x83, 0x7F,
              0xF9, 0x00, 0xFE, 0xFE, 0xFE, 0xE0, 0xEF, 0xEF, 0xEF, 0x00,
              0xEF, 0xEF, 0xEF, 0xE0, 0xFE, 0xFE, 0xFE, 0x00, 0xEF, 0xEF,
              0xEF, 0xE0, 0xEE, 0xEE, 0xEE, 0x00, 0xFE, 0xFE, 0xFE, 0xE0,
              0xEE, 0xEE, 0xEE, 0x00, 0x00, 0x00, 0x60, 0xE0, 0x7E, 0xFF,
              0xBD, 0xF7, 0x7E, 0x18, 0x3C, 0x5E, 0x3C, 0x3C, 0x24, 0x00,
              0x00, 0x60, 0x60, 0xFE, 0xFF, 0xBD, 0xF7, 0x7E, 0x18, 0x3C,
              0x5E, 0x3C, 0x3C, 0x48, 0x00, 0x00, 0x00, 0x60, 0x60, 0xFE,
              0xFF, 0xBD, 0xF7, 0x7E, 0x18, 0x7E, 0x1C, 0x3C, 0x3C, 0x24,
              0x00, 0x00, 0x00, 0x00, 0x60, 0xFE, 0xFF, 0xFF, 0xBD, 0x76,
              0x18, 0x3C, 0x5E, 0x3C, 0x3C, 0x12, 0x00, 0x00, 0x00, 0x00,
              0x06, 0x07, 0x7E, 0xFF, 0xBD, 0xEF, 0x7E, 0x18, 0x3C, 0x7A,
              0x3C, 0x3C, 0x24, 0x00, 0x00, 0x06, 0x06, 0x7F, 0xFF, 0xBD,
              0xEF, 0x7E, 0x18, 0x3C, 0x7A, 0x3C, 0x3C, 0x12, 0x00, 0x00,
              0x00, 0x06, 0x06, 0x7F, 0xFF, 0xBD, 0xEF, 0x7E, 0x18, 0x7E,
              0x38, 0x3C, 0x3C, 0x24, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7F,
              0xFF, 0xFF, 0xBD, 0x6E, 0x18, 0x3C, 0x7A, 0x3C, 0x3C, 0x48,
              0x00, 0x00, 0x2E, 0x0A, 0x10, 0x2E, 0xFE, 0xFF, 0xFE, 0xFF,
              0x02, 0x01, 0x02, 0x01, 0x62, 0x04, 0xF2, 0x15, 0xF2, 0x07,
              0x32, 0x00, 0x13, 0x2A, 0x00, 0xEE, 0x60, 0x02, 0x81, 0xD0,
              0x71, 0x08, 0x62, 0x01, 0xA2, 0x9A, 0xFC, 0x1E, 0xF8, 0x1E,
              0xDA, 0xBF, 0xA2, 0x2F, 0xDD, 0x04, 0xA2, 0x33, 0xD1, 0x04,
              0xA2, 0x37, 0xDE, 0x23, 0xA3, 0x1A, 0xF5, 0x1E, 0xF0, 0x65,
              0x61, 0x09, 0xA2, 0x3A, 0x82, 0x5E, 0x82, 0x2E, 0x82, 0x2E,
              0x82, 0x2E, 0xF2, 0x1E, 0xD0, 0x1F, 0x00, 0xEE, 0x60, 0x00,
              0x61, 0x19, 0xA2, 0x7A, 0xC2, 0x18, 0xF2, 0x1E, 0xD0, 0x17,
              0x70, 0x08, 0x30, 0x40, 0x13, 0x6A, 0x00, 0xEE, 0x61, 0x10,
              0xF1, 0x18, 0x61, 0x03, 0x85, 0x12, 0xA2, 0x9A, 0xF1, 0x1E,
              0x61, 0x01, 0xD0, 0x1F, 0x61, 0x10, 0xD0, 0x1F, 0x23, 0x26,
              0x61, 0x01, 0xD0, 0x1F, 0x61, 0x10, 0xD0, 0x1F, 0x82, 0x00,
              0x80, 0x34, 0x61, 0x3F, 0x82, 0x00, 0x82, 0x12, 0x32, 0x00,
              0x13, 0x84, 0x00, 0xE0, 0x23, 0x66, 0x00, 0xEE, 0x80, 0xA0,
              0x8A, 0x70, 0x67, 0x40, 0x87, 0x05, 0x75, 0xFF, 0x60, 0x40,
              0x63, 0xF0, 0x13, 0x7A, 0x80, 0xA0, 0x8A, 0x70, 0x67, 0x40,
              0x87, 0x04, 0x75, 0x01, 0x60, 0x00, 0x63, 0x10, 0x13, 0x7A,
              0x79, 0xFF, 0x7C, 0x10, 0x60, 0x30, 0x8C, 0x02, 0x48, 0x00,
              0x7A, 0x01, 0x38, 0x00, 0x7A, 0xFF, 0x00, 0xEE, 0x68, 0x40,
              0x00, 0xEE, 0x48, 0x00, 0x13, 0xDE, 0x69, 0x04, 0x00, 0xEE,
              0x68, 0x00, 0x00, 0xEE, 0x48, 0x40, 0x13, 0xEA, 0x69, 0x04,
              0x00, 0xEE, 0x39, 0x00, 0x13, 0xCC, 0x60, 0x07, 0xE0, 0xA1,
              0x13, 0xE2, 0x60, 0x09, 0xE0, 0xA1, 0x13, 0xEE, 0x60, 0x04,
              0xE0, 0xA1, 0x13, 0xAC, 0x60, 0x06, 0xE0, 0xA1, 0x13, 0xBC,
              0x00, 0xEE, 0x60, 0x0F, 0x61, 0x0D, 0xA2, 0x02, 0xD0, 0x1F,
              0x70, 0x0C, 0x71, 0xFB, 0xA2, 0x11, 0xD0, 0x1F, 0x70, 0x0C,
              0x71, 0xFB, 0xA2, 0x20, 0xD0, 0x1F, 0x60, 0x10, 0x23, 0x26,
              0x70, 0xFF, 0x30, 0x00, 0x14, 0x2E, 0x00, 0xE0, 0x65, 0x00,
              0x66, 0x00, 0x67, 0x00, 0x68, 0x00, 0x69, 0x00, 0x6A, 0x0A,
              0x6B, 0x0A, 0x6C, 0x00, 0x6D, 0x0A, 0x6E, 0x28, 0x23, 0x66,
              0x23, 0x32, 0x23, 0x32, 0x23, 0xF6, 0xA3, 0x1E, 0xF5, 0x1E,
              0xF5, 0x1E, 0xF1, 0x65, 0x8D, 0x04, 0x8E, 0x14, 0x23, 0x32,
              0x23, 0x26, 0x14, 0x50,
    ]);

    while !chip.frame(1000, &mut pe) {
    }
}

mod dummy {
    extern crate chip;

    #[derive(Default)]
    pub struct Peripheral;

    impl chip::Timer for Peripheral {
        fn pump(&mut self) -> bool {
            false
        }
    }

    impl chip::Video for Peripheral {
        fn clear(&mut self) {
        }

        fn draw(&mut self, x: isize, y: isize, sprite: &[u8]) -> bool {
            false
        }

        fn present(&self) {
        }
    }

    impl chip::Audio for Peripheral {
        fn buzz(&mut self, on: bool) {
        }
    }

    impl chip::Input for Peripheral {
        fn keydown(&self, which: usize) -> bool {
            false
        }

        fn key(&self) -> Option<u8> {
            None
        }
    }
}

